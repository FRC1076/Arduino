#include <PaletteFont.h>
//
// Constant: font8x8_1076
// Contains an 8x8 font map for unicode points U+0020 - U+007F
// Font is rotated to be more easily shifted into 8 bit high NeoPixel
// display 1 column at a time.
//
// Font is rotation of that published by:
// And subsequently mapped to font8x8_basic by:
// black and purple for now
static uint32_t MonoPurple[] = {
    0x000000,
    0x050005
};

Palette::Palette(String name) : _name(name), _palette(MonoPurple) {
	_size = sizeof(MonoPurple) / sizeof(uint32_t);
}

uint32_t
Palette::color(byte index) {
	if (index < 0 || index >= _size) {
		return 0x000100;           // ghost color (very dim green)
	} else {
		return _palette[index];
	}
}

String
Palette::name(void) {
	return _name;
}

// assemble the 0 or 1 color values into a binary byte (using preprocessor concatentation)
//#define GC(a,b,c,d,e,f,g,h) GlyphColumn((byte)a|(byte)b<<4|(byte)c<<8|(byte)d<<12|(byte)e<<16|(byte)f<<20|(byte)g<<24|(byte)h<<28)
#define GC(a,b,c,d,e,f,g,h)  GlyphColumn(0b ## a ## b ## c ## d ## e ## f ## g ## h)

// assemble the 16 color values (4 bits each) into a uint32_t (4*8==32!)
// #define GC(a,b,c,d,e,f,g,h) GlyphCol(a|b<<4|c<<8|d<<12|e<<16|f<<20|g<<24|h<<28)

// single byte can represent a column of two color values
GlyphColumn::GlyphColumn(byte column) : _font_data(column) { }

GlyphColumn::GlyphColumn(const GlyphColumn &gc) : _font_data(gc._font_data) { }

GlyphColumn::GlyphColumn(void) : _font_data(0) { }

byte
GlyphColumn::data(void) {
	return _font_data;
}

//
//  If the column_index is a byte, then we assume we
//  are doing BW image and so need to extract the info
//  from a single bit in the byte.  (derived from the column_index)
//
byte
GlyphColumn::row(byte row_index) {
	if (row_index > 8) {
		return 0;
	}
	byte mask = 0x1 << row_index;   // generate the mask bit
	if (mask & _font_data) {
		return 1;
	} else {
		return 0;
	}
}

FontGlyph::FontGlyph(GlyphColumn c0,
					 GlyphColumn c1,
					 GlyphColumn c2,
					 GlyphColumn c3,
					 GlyphColumn c4,
					 GlyphColumn c5,
					 GlyphColumn c6,
					 GlyphColumn c7) {
	_columns[0] = c0;
	_columns[1] = c1;
	_columns[2] = c2;
	_columns[3] = c3;
	_columns[4] = c4;
	_columns[5] = c5;
	_columns[6] = c6;
	_columns[7] = c7;	
}

GlyphColumn *
FontGlyph::column(byte index) {
	return _columns+index;
}


GlyphColumn gc0 = GC(0,0,0,0,0,0,0,0);
GlyphColumn gc1(0b00010001);
GlyphColumn gc2(0b00110011);
GlyphColumn gc3(0b01110111);
GlyphColumn gc4(0b10001000);
GlyphColumn gc5(0b11001100);
GlyphColumn gc6(0b11111111);
GlyphColumn gc7(0b01010101);

FontGlyph fg(gc0, gc1, gc2, gc3, gc4, gc5, gc6, gc7);


FontGlyph Samurai_glyphs[] = {
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char   ascii 32 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,0),GC(1,1,1,0,0,0,0,0),GC(1,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char ! ascii 33 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,0,0,0,0),GC(0,1,1,1,0,0,0,0),
            GC(0,1,1,1,0,0,0,0),GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,0,0,0,0),
            GC(1,1,1,1,0,0,0,0),GC(0,1,1,1,0,0,0,0)), // char " ascii 34 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,1,1,1,1,0,0),GC(0,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,1,1,0,0),GC(0,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,1,1,0,0)), // char # ascii 35 
  FontGlyph(GC(0,1,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,0),
            GC(0,1,1,1,1,1,1,0),GC(0,0,0,0,0,0,0,0)), // char $ ascii 36 
  FontGlyph(GC(1,1,1,1,0,0,1,1),GC(1,1,1,1,0,1,1,0),GC(1,1,1,1,1,1,0,0),
            GC(1,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,1,1,1,1),GC(0,1,0,0,0,1,1,1)), // char % ascii 37 
  FontGlyph(GC(0,0,0,0,0,1,1,0),GC(0,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,0,1,1),GC(1,1,1,1,1,1,1,1),GC(0,1,1,0,1,1,1,0),
            GC(0,0,0,1,1,1,1,1),GC(0,0,0,1,1,0,1,1)), // char & ascii 38 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,0,0,0,0),GC(1,1,1,1,0,0,0,0),
            GC(0,1,1,1,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char ' ascii 39 
  FontGlyph(GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,1,1),GC(0,1,1,1,1,1,1,1),GC(0,1,1,1,1,1,1,1),
            GC(0,0,1,1,1,1,1,0),GC(0,0,0,1,1,1,0,0)), // char ( ascii 40 
  FontGlyph(GC(0,0,0,0,1,0,0,0),GC(0,0,0,1,1,1,0,0),GC(0,0,1,1,1,1,1,0),
            GC(0,1,1,1,1,1,1,1),GC(0,1,1,1,1,1,1,1),GC(0,0,0,1,1,1,0,0),
            GC(0,0,0,1,1,1,0,0),GC(0,0,0,1,1,1,0,0)), // char ) ascii 41 
  FontGlyph(GC(0,1,1,0,0,0,1,1),GC(1,1,1,1,0,1,1,0),GC(1,1,1,1,1,1,0,0),
            GC(0,0,1,1,1,1,0,0),GC(0,0,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,1,1,1,0),GC(0,1,0,0,0,1,0,0)), // char * ascii 42 
  FontGlyph(GC(0,0,0,1,1,0,0,0),GC(0,0,0,1,1,0,0,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,0,0),GC(0,1,0,1,1,0,0,0),
            GC(0,0,0,1,1,0,0,0),GC(0,0,0,0,0,0,0,0)), // char + ascii 43 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,1,1,0),GC(0,0,0,0,0,1,1,1),
            GC(0,0,0,0,0,1,1,1),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char , ascii 44 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,1,1,1,0,0),GC(0,0,0,1,1,1,0,0),
            GC(0,0,0,1,1,1,0,0),GC(0,0,0,1,1,0,0,0),GC(0,0,0,1,1,0,0,0),
            GC(0,0,0,1,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char - ascii 45 
  FontGlyph(GC(0,0,0,0,0,1,1,1),GC(0,0,0,0,0,1,1,1),GC(0,0,0,0,0,1,1,1),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char . ascii 46 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,1,1),GC(0,0,0,0,1,1,1,0),
            GC(0,0,1,1,1,1,0,0),GC(0,1,1,1,1,0,0,0),GC(1,1,1,1,0,0,0,0),
            GC(1,1,1,0,0,0,0,0),GC(0,1,0,0,0,0,0,0)), // char / ascii 47 
  FontGlyph(GC(0,0,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,1),GC(1,1,1,0,0,1,1,1),
            GC(1,1,0,0,0,0,1,1),GC(1,1,0,0,0,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(0,1,1,1,1,1,0,0),GC(0,0,1,1,1,0,0,0)), // char 0 ascii 48 
  FontGlyph(GC(0,0,0,0,0,1,1,0),GC(0,1,1,0,0,1,1,1),GC(0,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,0),GC(1,1,0,0,0,1,1,0),
            GC(0,0,0,0,0,1,0,0),GC(0,0,0,0,0,0,0,0)), // char 1 ascii 49 
  FontGlyph(GC(0,1,1,1,0,1,1,0),GC(1,1,1,1,0,1,1,1),GC(1,1,1,0,1,1,1,1),
            GC(1,1,0,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,0,1,1,0),
            GC(1,1,1,1,0,1,1,0),GC(0,1,1,0,0,1,1,0)), // char 2 ascii 50 
  FontGlyph(GC(1,1,0,0,0,1,1,0),GC(1,1,1,0,0,1,1,0),GC(1,1,1,0,0,1,1,0),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,1,1,1,0),GC(0,1,0,0,0,1,0,0)), // char 3 ascii 51 
  FontGlyph(GC(0,0,0,0,1,1,1,0),GC(0,0,0,1,1,1,1,0),GC(0,0,1,1,1,1,0,0),
            GC(1,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(0,1,1,1,1,1,0,0),GC(0,1,0,0,1,0,0,0)), // char 4 ascii 52 
  FontGlyph(GC(0,1,1,0,0,1,1,0),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,0,1,1,1,1,1),
            GC(1,1,0,1,1,1,1,0),GC(1,0,0,0,1,1,0,0)), // char 5 ascii 53 
  FontGlyph(GC(0,0,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,1,1,0,1,1),GC(1,1,0,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,1,0),GC(0,1,1,0,1,1,0,0)), // char 6 ascii 54 
  FontGlyph(GC(1,1,1,0,0,0,0,0),GC(1,1,1,1,0,0,0,0),GC(0,1,1,1,0,1,1,0),
            GC(0,1,1,0,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,0,1,1),
            GC(1,1,1,0,0,0,0,0),GC(0,1,0,0,0,0,0,0)), // char 7 ascii 55 
  FontGlyph(GC(0,0,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,1,1,0,1,1),GC(1,1,0,1,1,0,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,0,1,1,0,0,0)), // char 8 ascii 56 
  FontGlyph(GC(0,1,1,1,0,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,1,1,0,1,1),GC(1,1,0,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,1,1,1,0,0,0)), // char 9 ascii 57 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,1,1,1,0,1,1,1),GC(0,1,1,1,0,1,1,1),GC(0,1,1,1,0,1,1,1),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char : ascii 58 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,1,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,1),GC(0,1,1,0,1,1,1,1),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char ; ascii 59 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,1,0,0,0,0),GC(0,0,1,1,1,0,0,0),
            GC(0,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,0,0,1,1,1),
            GC(0,1,0,0,0,0,1,1),GC(0,0,0,0,0,0,0,0)), // char < ascii 60 
  FontGlyph(GC(0,1,1,0,1,1,0,0),GC(0,1,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,0),
            GC(0,1,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,0),GC(0,1,1,0,1,1,0,0),
            GC(0,1,1,0,1,1,0,0),GC(0,1,0,0,1,0,0,0)), // char = ascii 61 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(1,1,0,0,0,0,1,1),GC(1,1,1,0,0,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),GC(0,1,1,1,1,0,0,0),
            GC(0,0,0,1,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char > ascii 62 
  FontGlyph(GC(1,1,1,0,0,0,0,0),GC(1,1,1,0,0,0,0,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,0,0,0),
            GC(1,1,1,1,0,0,0,0),GC(0,1,1,0,0,0,0,0)), // char ? ascii 63 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char @ ascii 64 
  FontGlyph(GC(0,0,0,0,1,1,1,0),GC(0,0,0,0,1,1,1,1),GC(0,0,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,0,0),
            GC(0,0,1,1,1,1,1,1),GC(0,0,0,0,1,0,1,1)), // char A ascii 65 
  FontGlyph(GC(1,1,1,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,1,1,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,0),GC(0,1,1,0,1,1,0,0)), // char B ascii 66 
  FontGlyph(GC(0,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,0,0,1,1,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,0,1,1,1),GC(1,1,1,0,0,1,1,1),
            GC(0,1,1,0,1,1,1,0),GC(0,0,0,0,1,1,0,0)), // char C ascii 67 
  FontGlyph(GC(1,1,0,0,0,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,1,1,1,0),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,1,1,1,0,0,0)), // char D ascii 68 
  FontGlyph(GC(1,1,1,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,0,1,1,1,1,1),
            GC(1,1,0,1,0,1,1,1),GC(1,0,0,0,0,1,0,0)), // char E ascii 69 
  FontGlyph(GC(1,1,0,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,0,0,0),GC(1,1,1,1,1,0,0,0),GC(1,1,1,1,1,0,0,0),
            GC(1,1,0,1,0,0,0,0),GC(1,0,0,0,0,0,0,0)), // char F ascii 70 
  FontGlyph(GC(0,0,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,1,1,1,1,1),GC(1,1,0,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,0,1,0,0,1,1)), // char G ascii 71 
  FontGlyph(GC(0,1,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,0,1,1,1,0,0,0),GC(0,0,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1)), // char H ascii 72 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char I ascii 73 
  FontGlyph(GC(0,0,0,1,1,1,1,0),GC(0,0,0,1,1,1,1,1),GC(0,0,0,1,1,0,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,0,0,0,0,0,0)), // char J ascii 74 
  FontGlyph(GC(1,1,0,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,1,0,1,1,1,0),GC(1,1,1,0,0,1,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,0,0,0,0,0,1,1)), // char K ascii 75 
  FontGlyph(GC(1,1,0,0,0,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,0,0,1,1,0),GC(0,0,0,0,1,1,1,0),GC(0,0,0,0,1,1,1,0),
            GC(0,0,0,0,1,1,1,0),GC(0,0,0,0,0,1,1,0)), // char L ascii 76 
  FontGlyph(GC(0,1,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,0,1,1,1,1,1,0),GC(0,0,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,1,1,1,1,1,1)), // char M ascii 77 
  FontGlyph(GC(0,1,1,1,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,0,0),GC(0,0,0,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,0,0,1,1,1,0)), // char N ascii 78 
  FontGlyph(GC(0,0,1,1,1,1,0,0),GC(0,1,1,1,1,1,1,0),GC(1,1,0,0,1,1,1,0),
            GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,0,1,1,1),GC(1,1,1,0,1,1,1,1),
            GC(0,1,1,1,1,1,1,0),GC(0,0,1,1,1,1,0,0)), // char O ascii 79 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,1,1,0,0),GC(1,1,1,1,1,1,0,0),GC(1,1,1,1,1,0,0,0),
            GC(1,1,1,1,0,0,0,0),GC(0,1,1,0,0,0,0,0)), // char P ascii 80 
  FontGlyph(GC(0,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,0,0,1,1,1,1),
            GC(1,1,0,1,1,1,1,1),GC(1,1,0,1,1,1,1,0),GC(1,1,0,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,0,1,1,1)), // char Q ascii 81 
  FontGlyph(GC(1,1,0,0,1,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,1,1,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,0,1,1,1),GC(0,1,1,0,0,0,1,1)), // char R ascii 82 
  FontGlyph(GC(0,1,1,1,0,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,0,1,1),
            GC(1,1,0,1,1,0,1,1),GC(1,1,0,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,0),GC(0,1,1,0,1,1,0,0)), // char S ascii 83 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,0,0,0,0,0),GC(1,1,1,0,0,0,0,0),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,0,0,0,0,0,0),
            GC(1,1,0,0,0,0,0,0),GC(1,0,0,0,0,0,0,0)), // char T ascii 84 
  FontGlyph(GC(0,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,0,0,0,1,1,1),
            GC(0,0,0,0,0,0,1,1),GC(0,1,1,0,0,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,1,1,1,0,0,0)), // char U ascii 85 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,1,1,1,1),GC(1,1,1,1,1,1,0,0),
            GC(1,1,1,1,0,0,0,0),GC(0,1,0,0,0,0,0,0)), // char V ascii 86 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(0,1,0,1,1,1,1,0),GC(1,1,0,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,0),GC(0,1,1,0,0,0,0,0)), // char W ascii 87 
  FontGlyph(GC(0,1,1,0,0,0,1,1),GC(1,1,1,1,0,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(0,0,1,1,1,1,0,0),GC(0,0,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,0,1,1,0),GC(0,1,0,0,0,1,0,0)), // char X ascii 88 
  FontGlyph(GC(0,1,1,0,0,0,0,0),GC(1,1,1,1,0,0,0,0),GC(1,1,1,1,1,0,0,0),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,1,1,1,1),GC(1,1,1,1,0,1,1,0),
            GC(1,1,0,0,0,0,0,0),GC(1,0,0,0,0,0,0,0)), // char Y ascii 89 
  FontGlyph(GC(0,0,0,0,0,1,1,0),GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,1,1,1,1),
            GC(1,1,1,0,1,1,1,1),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,0,1,1,0),
            GC(1,1,1,0,0,1,1,0),GC(1,1,0,0,0,1,1,0)), // char Z ascii 90 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,0,0,1,1,1),
            GC(1,1,1,0,0,1,1,1),GC(0,0,0,0,0,0,0,0)), // char [ ascii 91 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(1,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,0,0),
            GC(1,1,1,1,1,1,1,1),GC(0,0,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(1,0,1,1,1,1,0,0)), // char \ ascii 92 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(1,1,1,0,0,1,1,1),
            GC(1,1,1,0,0,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(0,1,1,1,1,1,0,0),GC(0,0,0,0,0,0,0,0)), // char ] ascii 93 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,1,1),GC(0,0,0,0,0,0,1,1),
            GC(0,0,0,0,0,0,1,1),GC(0,0,0,0,0,0,1,1),GC(0,0,0,0,0,0,1,1),
            GC(0,0,0,0,0,0,1,1),GC(0,0,0,0,0,0,0,0)), // char ^ ascii 94 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char _ ascii 95 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char ` ascii 96 
  FontGlyph(GC(0,0,0,0,1,1,1,0),GC(0,0,0,0,1,1,1,1),GC(0,0,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,0,0),
            GC(0,0,1,1,1,1,1,1),GC(0,0,0,0,1,0,1,1)), // char a ascii 97 
  FontGlyph(GC(1,1,1,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,1,1,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,0),GC(0,1,1,0,1,1,0,0)), // char b ascii 98 
  FontGlyph(GC(0,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,0,0,1,1,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,0,1,1,1),GC(1,1,1,0,0,1,1,1),
            GC(0,1,1,0,1,1,1,0),GC(0,0,0,0,1,1,0,0)), // char c ascii 99 
  FontGlyph(GC(1,1,0,0,0,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,1,1,1,0),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,1,1,1,0,0,0)), // char d ascii 100 
  FontGlyph(GC(1,1,1,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,0,1,1,1,1,1),
            GC(1,1,0,1,0,1,1,1),GC(1,0,0,0,0,1,0,0)), // char e ascii 101 
  FontGlyph(GC(1,1,0,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,0,0,0),GC(1,1,1,1,1,0,0,0),GC(1,1,1,1,1,0,0,0),
            GC(1,1,0,1,0,0,0,0),GC(1,0,0,0,0,0,0,0)), // char f ascii 102 
  FontGlyph(GC(0,0,1,1,1,1,1,0),GC(0,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,0,1,1,1,1,1),GC(1,1,0,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,0,1,0,0,1,1)), // char g ascii 103 
  FontGlyph(GC(0,1,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,0,1,1,1,0,0,0),GC(0,0,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1)), // char h ascii 104 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char i ascii 105 
  FontGlyph(GC(0,0,0,1,1,1,1,0),GC(0,0,0,1,1,1,1,1),GC(0,0,0,1,1,0,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,0,0,0,0,0,0)), // char j ascii 106 
  FontGlyph(GC(1,1,0,0,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,1,0,1,1,1,0),GC(1,1,1,0,0,1,1,1),
            GC(1,1,0,0,0,1,1,1),GC(1,0,0,0,0,0,1,1)), // char k ascii 107 
  FontGlyph(GC(1,1,0,0,0,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,0,0,1,1,0),GC(0,0,0,0,1,1,1,0),GC(0,0,0,0,1,1,1,0),
            GC(0,0,0,0,1,1,1,0),GC(0,0,0,0,0,1,1,0)), // char l ascii 108 
  FontGlyph(GC(0,1,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,0,1,1,1,1,1,0),GC(0,0,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,1,1,1,1,1,1)), // char m ascii 109 
  FontGlyph(GC(0,1,1,1,0,0,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,0,0),GC(0,0,0,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,1),GC(0,1,0,0,1,1,1,0)), // char n ascii 110 
  FontGlyph(GC(0,0,1,1,1,1,0,0),GC(0,1,1,1,1,1,1,0),GC(1,1,0,0,1,1,1,0),
            GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,0,1,1,1),GC(1,1,1,0,1,1,1,1),
            GC(0,1,1,1,1,1,1,0),GC(0,0,1,1,1,1,0,0)), // char o ascii 111 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,1,1,0,0),GC(1,1,1,1,1,1,0,0),GC(1,1,1,1,1,0,0,0),
            GC(1,1,1,1,0,0,0,0),GC(0,1,1,0,0,0,0,0)), // char p ascii 112 
  FontGlyph(GC(0,1,1,1,1,1,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,0,0,1,1,1,1),
            GC(1,1,0,1,1,1,1,1),GC(1,1,0,1,1,1,1,0),GC(1,1,0,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,0,1,1,1)), // char q ascii 113 
  FontGlyph(GC(1,1,0,0,1,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,1,1,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,0,1,1,1),GC(0,1,1,0,0,0,1,1)), // char r ascii 114 
  FontGlyph(GC(0,1,1,1,0,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,0,1,1),
            GC(1,1,0,1,1,0,1,1),GC(1,1,0,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,1,1,1,1,0),GC(0,1,1,0,1,1,0,0)), // char s ascii 115 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,0,0,0,0,0),GC(1,1,1,0,0,0,0,0),
            GC(1,1,1,1,1,1,1,1),GC(1,1,1,1,1,1,1,1),GC(1,1,0,0,0,0,0,0),
            GC(1,1,0,0,0,0,0,0),GC(1,0,0,0,0,0,0,0)), // char t ascii 116 
  FontGlyph(GC(0,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),GC(1,1,0,0,0,1,1,1),
            GC(0,0,0,0,0,0,1,1),GC(0,1,1,0,0,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(1,1,1,1,1,1,0,0),GC(0,1,1,1,1,0,0,0)), // char u ascii 117 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,1,0,0,0),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,1,1,1,1),GC(1,1,1,1,1,1,0,0),
            GC(1,1,1,1,0,0,0,0),GC(0,1,0,0,0,0,0,0)), // char v ascii 118 
  FontGlyph(GC(1,1,0,0,0,0,0,0),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(0,1,0,1,1,1,1,0),GC(1,1,0,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(0,1,1,1,1,1,1,0),GC(0,1,1,0,0,0,0,0)), // char w ascii 119 
  FontGlyph(GC(0,1,1,0,0,0,1,1),GC(1,1,1,1,0,1,1,1),GC(1,1,1,1,1,1,1,0),
            GC(0,0,1,1,1,1,0,0),GC(0,0,1,1,1,1,1,0),GC(1,1,1,1,1,1,1,1),
            GC(1,1,1,0,0,1,1,0),GC(0,1,0,0,0,1,0,0)), // char x ascii 120 
  FontGlyph(GC(0,1,1,0,0,0,0,0),GC(1,1,1,1,0,0,0,0),GC(1,1,1,1,1,0,0,0),
            GC(0,1,1,1,1,1,1,1),GC(0,0,1,1,1,1,1,1),GC(1,1,1,1,0,1,1,0),
            GC(1,1,0,0,0,0,0,0),GC(1,0,0,0,0,0,0,0)), // char y ascii 121 
  FontGlyph(GC(0,0,0,0,0,1,1,0),GC(1,1,0,0,0,1,1,1),GC(1,1,0,0,1,1,1,1),
            GC(1,1,1,0,1,1,1,1),GC(1,1,1,1,1,1,1,0),GC(1,1,1,1,0,1,1,0),
            GC(1,1,1,0,0,1,1,0),GC(1,1,0,0,0,1,1,0)), // char z ascii 122 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char { ascii 123 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char | ascii 124 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)), // char } ascii 125 
  FontGlyph(GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0),
            GC(0,0,0,0,0,0,0,0),GC(0,0,0,0,0,0,0,0)) // char ~ ascii 126 
};


// This could, perhaps be replaced with something that reads
// the appropriate glyph def from SD card, thus saving us tons
// of memory.
PaletteFont::PaletteFont(String name) : _name(name), _glyphs(Samurai_glyphs) {
	_size = sizeof(Samurai_glyphs) / sizeof(FontGlyph);
}

uint8_t
PaletteFont::size() {
	return _size;
}

FontGlyph *
PaletteFont::glyph(byte index) {
	return _glyphs+index;
}

/* access the columns by index */
byte
PaletteFont::bitColumn(byte index) {
	return _columns[index];
}

/* access the column as an array of pallete color indices */
byte *
PaletteFont::byteColumn(byte index) {
	return ((byte *)_glyph)[index*8];
}

